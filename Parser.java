
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\223\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\007\000\002\006\003\000\002\006\002\000" +
    "\002\007\003\000\002\007\004\000\002\010\003\000\002" +
    "\010\002\000\002\011\003\000\002\011\004\000\002\012" +
    "\004\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\004" +
    "\000\002\017\004\000\002\020\003\000\002\020\005\000" +
    "\002\021\003\000\002\021\004\000\002\022\005\000\002" +
    "\023\005\000\002\024\003\000\002\024\002\000\002\025" +
    "\004\000\002\025\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\027\005\000\002\030\007\000" +
    "\002\031\007\000\002\032\004\000\002\032\002\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\004\000\002\035\013\000\002\035\012\000\002\036\003" +
    "\000\002\036\002\000\002\037\005\000\002\037\003\000" +
    "\002\040\004\000\002\041\005\000\002\042\003\000\002" +
    "\042\002\000\002\043\005\000\002\043\003\000\002\044" +
    "\005\000\002\044\004\000\002\045\005\000\002\046\005" +
    "\000\002\047\003\000\002\047\002\000\002\050\004\000" +
    "\002\050\003\000\002\051\004\000\002\051\004\000\002" +
    "\051\003\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\054\003\000\002" +
    "\054\003\000\002\055\004\000\002\056\007\000\002\057" +
    "\006\000\002\060\006\000\002\061\010\000\002\062\004" +
    "\000\002\062\010\000\002\062\002\000\002\063\011\000" +
    "\002\064\007\000\002\064\005\000\002\064\002\000\002" +
    "\065\007\000\002\065\007\000\002\066\011\000\002\067" +
    "\012\000\002\067\012\000\002\070\003\000\002\071\004" +
    "\000\002\073\003\000\002\073\003\000\002\073\003\000" +
    "\002\074\004\000\002\072\003\000\002\075\006\000\002" +
    "\075\003\000\002\076\006\000\002\076\003\000\002\077" +
    "\005\000\002\077\003\000\002\100\005\000\002\100\003" +
    "\000\002\101\005\000\002\101\003\000\002\102\005\000" +
    "\002\102\003\000\002\103\004\000\002\103\005\000\002" +
    "\103\005\000\002\103\003\000\002\104\004\000\002\104" +
    "\004\000\002\104\003\000\002\105\005\000\002\105\003" +
    "\000\002\106\003\000\002\106\003\000\002\107\003\000" +
    "\002\107\003\000\002\107\003\000\002\107\003\000\002" +
    "\110\003\000\002\110\003\000\002\111\003\000\002\111" +
    "\003\000\002\111\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\012\004\007\005\ufffe\010\ufffe\013\ufffe\001" +
    "\002\000\004\002\u0102\001\002\000\010\005\uffff\010\uffff" +
    "\013\uffff\001\002\000\012\004\007\005\ufffd\010\ufffd\013" +
    "\ufffd\001\002\000\004\076\375\001\002\000\010\005\011" +
    "\010\ufff9\013\ufff9\001\002\000\004\076\356\001\002\000" +
    "\006\010\ufffa\013\ufffa\001\002\000\006\010\ufff5\013\333" +
    "\001\002\000\004\046\020\001\002\000\010\005\011\010" +
    "\ufff8\013\ufff8\001\002\000\006\010\ufff7\013\ufff7\001\002" +
    "\000\016\005\uffcb\010\uffcb\011\uffcb\013\uffcb\041\uffcb\046" +
    "\uffcb\001\002\000\036\011\047\014\026\015\056\016\025" +
    "\017\024\020\027\021\023\024\021\027\031\030\035\031" +
    "\036\042\050\046\uffb9\076\032\001\002\000\004\047\312" +
    "\001\002\000\042\011\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\021\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\042\uffb4\046\uffb4\076\uffb4\001\002\000" +
    "\004\047\275\001\002\000\004\047\272\001\002\000\004" +
    "\076\032\001\002\000\004\043\uffaa\001\002\000\004\047" +
    "\263\001\002\000\042\011\047\014\026\015\056\016\025" +
    "\017\024\020\027\021\023\024\021\025\uffb7\026\uffb7\027" +
    "\031\030\035\031\036\042\050\046\uffb7\076\032\001\002" +
    "\000\004\047\255\001\002\000\064\040\uffe0\043\uffe0\044" +
    "\uffe0\045\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\054\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0" +
    "\074\uffe0\075\uffe0\076\uffe0\001\002\000\004\043\254\001" +
    "\002\000\006\040\170\043\uffcf\001\002\000\004\046\020" +
    "\001\002\000\004\047\230\001\002\000\010\025\uffba\026" +
    "\uffba\046\uffba\001\002\000\042\011\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\020\uffae\021\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\042\uffae\046\uffae\076\uffae" +
    "\001\002\000\004\043\uffab\001\002\000\042\011\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\042\uffb1\046" +
    "\uffb1\076\uffb1\001\002\000\060\040\uffde\043\uffde\044\uffde" +
    "\045\uffde\050\uffde\051\224\052\uffde\054\uffde\056\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\067\uffde\070\uffde\071\uffde\072\uffde\074\uffde\075" +
    "\uffde\001\002\000\004\043\uffad\001\002\000\004\043\223" +
    "\001\002\000\042\011\uffb3\014\uffb3\015\uffb3\016\uffb3\017" +
    "\uffb3\020\uffb3\021\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\042\uffb3\046\uffb3\076\uffb3\001\002\000" +
    "\016\032\163\033\156\034\157\035\166\036\162\076\032" +
    "\001\002\000\034\016\025\020\027\047\065\056\063\057" +
    "\102\073\067\076\032\077\074\100\101\101\111\102\075" +
    "\103\064\104\112\001\002\000\042\011\uffb0\014\uffb0\015" +
    "\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\024\uffb0\025\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\042\uffb0\046\uffb0\076" +
    "\uffb0\001\002\000\054\043\uffa7\044\uffa7\045\uffa7\050\uffa7" +
    "\052\uffa7\054\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7" +
    "\071\uffa7\072\uffa7\074\uffa7\075\uffa7\001\002\000\042\011" +
    "\uff95\014\uff95\015\uff95\016\uff95\017\uff95\020\uff95\021\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95\031\uff95\042" +
    "\uff95\046\uff95\076\uff95\001\002\000\042\011\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\042\uffb2\046\uffb2" +
    "\076\uffb2\001\002\000\042\011\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\042\uffaf\046\uffaf\076\uffaf\001" +
    "\002\000\004\043\uffa9\001\002\000\004\046\062\001\002" +
    "\000\004\043\uffac\001\002\000\054\043\uffa8\044\uffa8\045" +
    "\uffa8\050\uffa8\052\uffa8\054\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067" +
    "\uffa8\070\uffa8\071\uffa8\072\uffa8\074\uffa8\075\uffa8\001\002" +
    "\000\060\002\uffbb\005\uffbb\010\uffbb\011\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\041\uffbb\042\uffbb\046\uffbb\076\uffbb\001\002\000\004" +
    "\056\153\001\002\000\054\043\uffed\044\uffed\045\uffed\050" +
    "\uffed\052\uffed\054\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed\070" +
    "\uffed\071\uffed\072\uffed\074\uffed\075\uffed\001\002\000\026" +
    "\016\025\020\027\047\065\076\032\077\074\100\101\101" +
    "\111\102\075\103\064\104\112\001\002\000\054\043\uff7c" +
    "\044\uff7c\045\uff7c\050\uff7c\052\uff7c\054\uff7c\056\uff7c\057" +
    "\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c" +
    "\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\074\uff7c\075" +
    "\uff7c\001\002\000\034\016\025\020\027\047\065\056\063" +
    "\057\102\073\067\076\032\077\074\100\101\101\111\102" +
    "\075\103\064\104\112\001\002\000\054\043\uff93\044\uff93" +
    "\045\uff93\050\uff93\052\uff93\054\uff93\056\uff93\057\uff93\060" +
    "\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93" +
    "\067\uff93\070\uff93\071\uff93\072\uff93\074\uff93\075\uff93\001" +
    "\002\000\020\043\uff8d\044\uff8d\045\uff8d\050\uff8d\052\uff8d" +
    "\054\uff8d\072\145\001\002\000\054\043\uff7a\044\uff7a\045" +
    "\uff7a\050\uff7a\052\uff7a\054\uff7a\056\uff7a\057\uff7a\060\uff7a" +
    "\061\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067" +
    "\uff7a\070\uff7a\071\uff7a\072\uff7a\074\uff7a\075\uff7a\001\002" +
    "\000\026\043\uff89\044\uff89\045\uff89\050\uff89\052\uff89\054" +
    "\uff89\063\141\070\143\071\uff89\072\uff89\001\002\000\054" +
    "\043\uffef\044\uffef\045\uffef\050\uffef\052\uffef\054\uffef\056" +
    "\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef" +
    "\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef\072\uffef\074" +
    "\uffef\075\uffef\001\002\000\054\043\ufff1\044\ufff1\045\ufff1" +
    "\050\ufff1\052\ufff1\054\ufff1\056\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1" +
    "\070\ufff1\071\ufff1\072\ufff1\074\ufff1\075\ufff1\001\002\000" +
    "\054\043\uff92\044\uff92\045\uff92\050\uff92\052\uff92\054\uff92" +
    "\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92\064" +
    "\uff92\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92" +
    "\074\uff92\075\uff92\001\002\000\042\043\uff85\044\uff85\045" +
    "\uff85\050\uff85\052\uff85\054\uff85\056\136\057\137\063\uff85" +
    "\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072" +
    "\uff85\001\002\000\036\043\uff87\044\uff87\045\uff87\050\uff87" +
    "\052\uff87\054\uff87\063\uff87\064\130\065\133\066\131\067" +
    "\127\070\uff87\071\uff87\072\uff87\001\002\000\054\043\uffee" +
    "\044\uffee\045\uffee\050\uffee\052\uffee\054\uffee\056\uffee\057" +
    "\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\067\uffee\070\uffee\071\uffee\072\uffee\074\uffee\075" +
    "\uffee\001\002\000\004\057\125\001\002\000\022\043\uff8b" +
    "\044\uff8b\045\uff8b\050\uff8b\052\uff8b\054\uff8b\071\122\072" +
    "\uff8b\001\002\000\054\043\uff91\044\uff91\045\uff91\050\uff91" +
    "\052\uff91\054\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91" +
    "\071\uff91\072\uff91\074\uff91\075\uff91\001\002\000\014\043" +
    "\uff8f\044\uff8f\045\uff8f\050\uff8f\054\uff8f\001\002\000\054" +
    "\043\uff7f\044\uff7f\045\uff7f\050\uff7f\052\uff7f\054\uff7f\056" +
    "\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f" +
    "\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\074" +
    "\121\075\120\001\002\000\050\043\uff83\044\uff83\045\uff83" +
    "\050\uff83\052\uff83\054\uff83\056\uff83\057\uff83\060\116\061" +
    "\115\062\114\063\uff83\064\uff83\065\uff83\066\uff83\067\uff83" +
    "\070\uff83\071\uff83\072\uff83\001\002\000\004\043\uff94\001" +
    "\002\000\054\043\ufff0\044\ufff0\045\ufff0\050\ufff0\052\ufff0" +
    "\054\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\072\ufff0\074\ufff0\075\ufff0\001\002\000\054\043\uffec\044" +
    "\uffec\045\uffec\050\uffec\052\uffec\054\uffec\056\uffec\057\uffec" +
    "\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\071\uffec\072\uffec\074\uffec\075\uffec" +
    "\001\002\000\034\016\025\020\027\047\065\056\063\057" +
    "\102\073\067\076\032\077\074\100\101\101\111\102\075" +
    "\103\064\104\112\001\002\000\034\016\uff6f\020\uff6f\047" +
    "\uff6f\056\uff6f\057\uff6f\073\uff6f\076\uff6f\077\uff6f\100\uff6f" +
    "\101\uff6f\102\uff6f\103\uff6f\104\uff6f\001\002\000\034\016" +
    "\uff70\020\uff70\047\uff70\056\uff70\057\uff70\073\uff70\076\uff70" +
    "\077\uff70\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70\001" +
    "\002\000\034\016\uff71\020\uff71\047\uff71\056\uff71\057\uff71" +
    "\073\uff71\076\uff71\077\uff71\100\uff71\101\uff71\102\uff71\103" +
    "\uff71\104\uff71\001\002\000\042\043\uff84\044\uff84\045\uff84" +
    "\050\uff84\052\uff84\054\uff84\056\uff84\057\uff84\063\uff84\064" +
    "\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84" +
    "\001\002\000\054\043\uff7d\044\uff7d\045\uff7d\050\uff7d\052" +
    "\uff7d\054\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d" +
    "\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071" +
    "\uff7d\072\uff7d\074\uff7d\075\uff7d\001\002\000\054\043\uff7e" +
    "\044\uff7e\045\uff7e\050\uff7e\052\uff7e\054\uff7e\056\uff7e\057" +
    "\uff7e\060\uff7e\061\uff7e\062\uff7e\063\uff7e\064\uff7e\065\uff7e" +
    "\066\uff7e\067\uff7e\070\uff7e\071\uff7e\072\uff7e\074\uff7e\075" +
    "\uff7e\001\002\000\004\071\123\001\002\000\034\016\025" +
    "\020\027\047\065\056\063\057\102\073\067\076\032\077" +
    "\074\100\101\101\111\102\075\103\064\104\112\001\002" +
    "\000\020\043\uff8c\044\uff8c\045\uff8c\050\uff8c\052\uff8c\054" +
    "\uff8c\072\uff8c\001\002\000\034\016\025\020\027\047\065" +
    "\056\063\057\102\073\067\076\032\077\074\100\101\101" +
    "\111\102\075\103\064\104\112\001\002\000\050\043\uff80" +
    "\044\uff80\045\uff80\050\uff80\052\uff80\054\uff80\056\uff80\057" +
    "\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065\uff80" +
    "\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\001\002\000" +
    "\034\016\uff77\020\uff77\047\uff77\056\uff77\057\uff77\073\uff77" +
    "\076\uff77\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104" +
    "\uff77\001\002\000\034\016\uff74\020\uff74\047\uff74\056\uff74" +
    "\057\uff74\073\uff74\076\uff74\077\uff74\100\uff74\101\uff74\102" +
    "\uff74\103\uff74\104\uff74\001\002\000\034\016\uff75\020\uff75" +
    "\047\uff75\056\uff75\057\uff75\073\uff75\076\uff75\077\uff75\100" +
    "\uff75\101\uff75\102\uff75\103\uff75\104\uff75\001\002\000\034" +
    "\016\025\020\027\047\065\056\063\057\102\073\067\076" +
    "\032\077\074\100\101\101\111\102\075\103\064\104\112" +
    "\001\002\000\034\016\uff76\020\uff76\047\uff76\056\uff76\057" +
    "\uff76\073\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102\uff76" +
    "\103\uff76\104\uff76\001\002\000\026\043\uff88\044\uff88\045" +
    "\uff88\050\uff88\052\uff88\054\uff88\063\uff88\070\uff88\071\uff88" +
    "\072\uff88\001\002\000\034\016\025\020\027\047\065\056" +
    "\063\057\102\073\067\076\032\077\074\100\101\101\111" +
    "\102\075\103\064\104\112\001\002\000\034\016\uff73\020" +
    "\uff73\047\uff73\056\uff73\057\uff73\073\uff73\076\uff73\077\uff73" +
    "\100\uff73\101\uff73\102\uff73\103\uff73\104\uff73\001\002\000" +
    "\034\016\uff72\020\uff72\047\uff72\056\uff72\057\uff72\073\uff72" +
    "\076\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103\uff72\104" +
    "\uff72\001\002\000\036\043\uff86\044\uff86\045\uff86\050\uff86" +
    "\052\uff86\054\uff86\063\uff86\064\uff86\065\uff86\066\uff86\067" +
    "\uff86\070\uff86\071\uff86\072\uff86\001\002\000\034\016\uff78" +
    "\020\uff78\047\uff78\056\uff78\057\uff78\073\uff78\076\uff78\077" +
    "\uff78\100\uff78\101\uff78\102\uff78\103\uff78\104\uff78\001\002" +
    "\000\034\016\025\020\027\047\065\056\063\057\102\073" +
    "\067\076\032\077\074\100\101\101\111\102\075\103\064" +
    "\104\112\001\002\000\034\016\uff79\020\uff79\047\uff79\056" +
    "\uff79\057\uff79\073\uff79\076\uff79\077\uff79\100\uff79\101\uff79" +
    "\102\uff79\103\uff79\104\uff79\001\002\000\022\043\uff8a\044" +
    "\uff8a\045\uff8a\050\uff8a\052\uff8a\054\uff8a\071\uff8a\072\uff8a" +
    "\001\002\000\004\072\146\001\002\000\034\016\025\020" +
    "\027\047\065\056\063\057\102\073\067\076\032\077\074" +
    "\100\101\101\111\102\075\103\064\104\112\001\002\000" +
    "\016\043\uff8e\044\uff8e\045\uff8e\050\uff8e\052\uff8e\054\uff8e" +
    "\001\002\000\050\043\uff82\044\uff82\045\uff82\050\uff82\052" +
    "\uff82\054\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82" +
    "\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82\071" +
    "\uff82\072\uff82\001\002\000\004\050\152\001\002\000\054" +
    "\043\uff7b\044\uff7b\045\uff7b\050\uff7b\052\uff7b\054\uff7b\056" +
    "\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b" +
    "\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\074" +
    "\uff7b\075\uff7b\001\002\000\034\016\025\020\027\047\065" +
    "\056\063\057\102\073\067\076\032\077\074\100\101\101" +
    "\111\102\075\103\064\104\112\001\002\000\050\043\uff81" +
    "\044\uff81\045\uff81\050\uff81\052\uff81\054\uff81\056\uff81\057" +
    "\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81" +
    "\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81\001\002\000" +
    "\010\050\uffeb\051\213\076\uffeb\001\002\000\010\050\uffe8" +
    "\051\uffe8\076\uffe8\001\002\000\010\050\uffe6\051\uffe6\076" +
    "\uffe6\001\002\000\010\047\uffe3\050\uffe3\076\uffe3\001\002" +
    "\000\014\045\220\047\uffe4\050\uffe4\051\213\076\uffe4\001" +
    "\002\000\010\050\uffe5\051\uffe5\076\uffe5\001\002\000\010" +
    "\050\uffe9\051\uffe9\076\uffe9\001\002\000\004\076\167\001" +
    "\002\000\006\050\uffea\076\uffea\001\002\000\010\050\uffe7" +
    "\051\uffe7\076\uffe7\001\002\000\006\040\170\043\uffcf\001" +
    "\002\000\040\012\174\016\025\020\027\047\065\053\173" +
    "\056\063\057\102\073\067\076\032\077\074\100\101\101" +
    "\111\102\075\103\064\104\112\001\002\000\004\043\172" +
    "\001\002\000\046\005\uffd1\011\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\041\uffd1\042\uffd1\046\uffd1\076" +
    "\uffd1\001\002\000\042\012\174\016\025\020\027\047\065" +
    "\053\173\054\uffc1\056\063\057\102\073\067\076\032\077" +
    "\074\100\101\101\111\102\075\103\064\104\112\001\002" +
    "\000\016\032\163\033\156\034\157\035\166\036\162\076" +
    "\032\001\002\000\012\043\uffce\044\uffce\050\uffce\054\uffce" +
    "\001\002\000\006\043\uffd0\050\uffd0\001\002\000\012\043" +
    "\uffcc\044\uffcc\050\uffcc\054\uffcc\001\002\000\012\043\uffcd" +
    "\044\uffcd\050\uffcd\054\uffcd\001\002\000\004\051\213\001" +
    "\002\000\004\047\203\001\002\000\042\012\174\016\025" +
    "\020\027\047\065\050\uffc1\053\173\056\063\057\102\073" +
    "\067\076\032\077\074\100\101\101\111\102\075\103\064" +
    "\104\112\001\002\000\010\044\210\050\uffbf\054\uffbf\001" +
    "\002\000\006\050\uffc2\054\uffc2\001\002\000\004\050\207" +
    "\001\002\000\012\043\uffd2\044\uffd2\050\uffd2\054\uffd2\001" +
    "\002\000\040\012\174\016\025\020\027\047\065\053\173" +
    "\056\063\057\102\073\067\076\032\077\074\100\101\101" +
    "\111\102\075\103\064\104\112\001\002\000\006\050\uffc0" +
    "\054\uffc0\001\002\000\010\047\uffe2\050\uffe2\076\uffe2\001" +
    "\002\000\004\052\214\001\002\000\012\047\uffbd\050\uffbd" +
    "\051\213\076\uffbd\001\002\000\010\047\uffbe\050\uffbe\076" +
    "\uffbe\001\002\000\004\054\217\001\002\000\012\043\uffc3" +
    "\044\uffc3\050\uffc3\054\uffc3\001\002\000\004\076\222\001" +
    "\002\000\010\047\uffe1\050\uffe1\076\uffe1\001\002\000\064" +
    "\040\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\054\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070" +
    "\uffdf\071\uffdf\072\uffdf\074\uffdf\075\uffdf\076\uffdf\001\002" +
    "\000\042\011\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\042\uffb5\046\uffb5\076\uffb5\001\002\000\034\016" +
    "\025\020\027\047\065\056\063\057\102\073\067\076\032" +
    "\077\074\100\101\101\111\102\075\103\064\104\112\001" +
    "\002\000\056\040\uffdd\043\uffdd\044\uffdd\045\uffdd\050\uffdd" +
    "\052\uffdd\054\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd" +
    "\071\uffdd\072\uffdd\074\uffdd\075\uffdd\001\002\000\004\052" +
    "\227\001\002\000\056\040\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\050\uffbc\052\uffbc\054\uffbc\056\uffbc\057\uffbc\060\uffbc\061" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc" +
    "\070\uffbc\071\uffbc\072\uffbc\074\uffbc\075\uffbc\001\002\000" +
    "\004\076\032\001\002\000\004\043\232\001\002\000\034" +
    "\016\025\020\027\047\065\056\063\057\102\073\067\076" +
    "\032\077\074\100\101\101\111\102\075\103\064\104\112" +
    "\001\002\000\034\016\025\020\027\047\065\056\063\057" +
    "\102\073\067\076\032\077\074\100\101\101\111\102\075" +
    "\103\064\104\112\001\002\000\004\043\235\001\002\000" +
    "\036\016\uff90\020\uff90\047\uff90\050\uff90\056\uff90\057\uff90" +
    "\073\uff90\076\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103" +
    "\uff90\104\uff90\001\002\000\004\050\244\001\002\000\046" +
    "\040\170\043\uff93\050\uffcf\056\uff93\057\uff93\060\uff93\061" +
    "\uff93\062\uff93\063\uff93\064\uff93\065\uff93\066\uff93\067\uff93" +
    "\070\uff93\071\uff93\072\uff93\074\uff93\075\uff93\001\002\000" +
    "\004\050\241\001\002\000\004\046\020\001\002\000\042" +
    "\011\uff97\014\uff97\015\uff97\016\uff97\017\uff97\020\uff97\021" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97" +
    "\042\uff97\046\uff97\076\uff97\001\002\000\006\043\uffa6\050" +
    "\uffa6\001\002\000\004\046\020\001\002\000\042\011\uff96" +
    "\014\uff96\015\uff96\016\uff96\017\uff96\020\uff96\021\uff96\024" +
    "\uff96\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\042\uff96" +
    "\046\uff96\076\uff96\001\002\000\004\027\247\001\002\000" +
    "\004\047\250\001\002\000\034\016\025\020\027\047\065" +
    "\056\063\057\102\073\067\076\032\077\074\100\101\101" +
    "\111\102\075\103\064\104\112\001\002\000\004\050\252" +
    "\001\002\000\004\043\253\001\002\000\042\011\uff98\014" +
    "\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98\024\uff98" +
    "\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\042\uff98\046" +
    "\uff98\076\uff98\001\002\000\042\011\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\042\uffb6\046\uffb6\076\uffb6" +
    "\001\002\000\034\016\025\020\027\047\065\056\063\057" +
    "\102\073\067\076\032\077\074\100\101\101\111\102\075" +
    "\103\064\104\112\001\002\000\004\050\257\001\002\000" +
    "\006\043\260\046\020\001\002\000\042\011\uff99\014\uff99" +
    "\015\uff99\016\uff99\017\uff99\020\uff99\021\uff99\024\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\042\uff99\046\uff99" +
    "\076\uff99\001\002\000\042\011\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\020\uff9a\021\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\042\uff9a\046\uff9a\076\uff9a\001" +
    "\002\000\010\025\uffb8\026\uffb8\046\uffb8\001\002\000\016" +
    "\032\163\033\156\034\157\035\166\036\162\076\032\001" +
    "\002\000\004\050\265\001\002\000\054\043\uffa3\044\uffa3" +
    "\045\uffa3\050\uffa3\052\uffa3\054\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\072\uffa3\074\uffa3\075\uffa3\001" +
    "\002\000\006\045\220\047\267\001\002\000\042\012\174" +
    "\016\025\020\027\047\065\050\uffc1\053\173\056\063\057" +
    "\102\073\067\076\032\077\074\100\101\101\111\102\075" +
    "\103\064\104\112\001\002\000\004\050\271\001\002\000" +
    "\054\043\uffa5\044\uffa5\045\uffa5\050\uffa5\052\uffa5\054\uffa5" +
    "\056\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5\064" +
    "\uffa5\065\uffa5\066\uffa5\067\uffa5\070\uffa5\071\uffa5\072\uffa5" +
    "\074\uffa5\075\uffa5\001\002\000\034\016\025\020\027\047" +
    "\065\056\063\057\102\073\067\076\032\077\074\100\101" +
    "\101\111\102\075\103\064\104\112\001\002\000\004\050" +
    "\274\001\002\000\004\043\uffa4\001\002\000\034\016\025" +
    "\020\027\047\065\056\063\057\102\073\067\076\032\077" +
    "\074\100\101\101\111\102\075\103\064\104\112\001\002" +
    "\000\004\050\277\001\002\000\004\046\020\001\002\000" +
    "\046\011\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\302\023\303\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\042\uff9f\046\uff9f\076\uff9f\001\002" +
    "\000\042\011\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\021\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\042\uffa2\046\uffa2\076\uffa2\001\002\000\004\046" +
    "\020\001\002\000\004\047\304\001\002\000\034\016\025" +
    "\020\027\047\065\056\063\057\102\073\067\076\032\077" +
    "\074\100\101\101\111\102\075\103\064\104\112\001\002" +
    "\000\004\050\306\001\002\000\004\046\020\001\002\000" +
    "\046\011\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\302\023\303\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\042\uff9f\046\uff9f\076\uff9f\001\002" +
    "\000\042\011\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0" +
    "\031\uffa0\042\uffa0\046\uffa0\076\uffa0\001\002\000\042\011" +
    "\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\042" +
    "\uffa1\046\uffa1\076\uffa1\001\002\000\034\016\025\020\027" +
    "\047\065\056\063\057\102\073\067\076\032\077\074\100" +
    "\101\101\111\102\075\103\064\104\112\001\002\000\004" +
    "\050\314\001\002\000\004\046\315\001\002\000\010\025" +
    "\320\026\317\046\uff9b\001\002\000\004\046\327\001\002" +
    "\000\004\045\325\001\002\000\034\016\025\020\027\047" +
    "\065\056\063\057\102\073\067\076\032\077\074\100\101" +
    "\101\111\102\075\103\064\104\112\001\002\000\004\045" +
    "\322\001\002\000\042\011\047\014\026\015\056\016\025" +
    "\017\024\020\027\021\023\024\021\025\uffb9\026\uffb9\027" +
    "\031\030\035\031\036\042\050\046\uffb9\076\032\001\002" +
    "\000\010\025\320\026\317\046\uff9b\001\002\000\004\046" +
    "\uff9d\001\002\000\036\011\047\014\026\015\056\016\025" +
    "\017\024\020\027\021\023\024\021\027\031\030\035\031" +
    "\036\042\050\046\uffb9\076\032\001\002\000\004\046\uff9c" +
    "\001\002\000\042\011\uff9e\014\uff9e\015\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\030\uff9e\031\uff9e\042\uff9e\046\uff9e\076\uff9e\001\002\000" +
    "\006\010\ufff4\013\333\001\002\000\004\010\352\001\002" +
    "\000\004\010\ufff6\001\002\000\004\076\334\001\002\000" +
    "\004\046\336\001\002\000\006\010\uffdc\013\uffdc\001\002" +
    "\000\012\005\011\011\047\041\341\046\uffd9\001\002\000" +
    "\004\046\351\001\002\000\012\005\uffd5\011\uffd5\041\uffd5" +
    "\046\uffd5\001\002\000\004\076\347\001\002\000\012\005" +
    "\uffd4\011\uffd4\041\uffd4\046\uffd4\001\002\000\012\005\011" +
    "\011\047\041\341\046\uffd7\001\002\000\004\046\uffda\001" +
    "\002\000\012\005\uffd6\011\uffd6\041\uffd6\046\uffd6\001\002" +
    "\000\004\046\uffd8\001\002\000\004\046\020\001\002\000" +
    "\012\005\uffd3\011\uffd3\041\uffd3\046\uffd3\001\002\000\006" +
    "\010\uffdb\013\uffdb\001\002\000\004\046\020\001\002\000" +
    "\004\002\000\001\002\000\004\002\ufff2\001\002\000\004" +
    "\010\ufff3\001\002\000\004\006\357\001\002\000\004\047" +
    "\360\001\002\000\020\032\163\033\156\034\157\035\166" +
    "\036\162\050\uffc7\076\032\001\002\000\004\050\uffc8\001" +
    "\002\000\004\076\374\001\002\000\004\050\367\001\002" +
    "\000\006\044\365\050\uffc5\001\002\000\016\032\163\033" +
    "\156\034\157\035\166\036\162\076\032\001\002\000\004" +
    "\050\uffc6\001\002\000\004\007\370\001\002\000\020\032" +
    "\163\033\156\034\157\035\166\036\162\037\371\076\032" +
    "\001\002\000\004\046\uffc9\001\002\000\004\076\373\001" +
    "\002\000\004\046\uffca\001\002\000\006\044\uffc4\050\uffc4" +
    "\001\002\000\004\040\376\001\002\000\034\016\025\020" +
    "\027\047\065\056\063\057\102\073\067\076\032\077\074" +
    "\100\101\101\111\102\075\103\064\104\112\001\002\000" +
    "\004\043\u0100\001\002\000\012\004\ufffb\005\ufffb\010\ufffb" +
    "\013\ufffb\001\002\000\010\005\ufffc\010\ufffc\013\ufffc\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0100\000\012\002\003\003\007\004\004\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\u0100" +
    "\005\005\001\001\000\002\001\001\000\012\006\012\007" +
    "\011\034\014\035\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\330\011\331\022\327\001\001\000" +
    "\004\046\016\001\001\000\010\007\015\034\014\035\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\020" +
    "\042\021\033\031\052\047\056\050\036\051\027\052\021" +
    "\053\032\054\044\055\043\056\060\057\057\060\051\061" +
    "\045\063\053\065\041\066\050\067\054\070\037\071\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\265\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\020\042\021\033\031" +
    "\052\050\261\051\027\052\021\053\032\054\044\055\043" +
    "\056\060\057\057\060\051\061\045\063\053\065\041\066" +
    "\050\067\054\070\037\071\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\242\001" +
    "\001\000\004\046\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\045\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\163\015\154\016" +
    "\164\017\157\020\160\001\001\000\044\013\103\020\042" +
    "\021\067\054\075\056\060\060\051\072\107\073\071\075" +
    "\104\076\070\077\102\100\072\101\077\102\076\103\106" +
    "\104\105\105\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\013\103\020\042\021\067\054\075\056" +
    "\060\060\051\073\071\105\150\001\001\000\002\001\001" +
    "\000\026\013\103\020\042\021\067\054\075\056\060\060" +
    "\051\073\071\103\147\104\105\105\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\106" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\110\134\001\001\000\004\107\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\111\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\013\103\020\042\021\067\054" +
    "\075\056\060\060\051\073\071\102\116\103\106\104\105" +
    "\105\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\013\103\020\042\021" +
    "\067\054\075\056\060\060\051\073\071\076\123\077\102" +
    "\100\072\101\077\102\076\103\106\104\105\105\065\001" +
    "\001\000\002\001\001\000\026\013\103\020\042\021\067" +
    "\054\075\056\060\060\051\073\071\103\125\104\105\105" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\013\103\020\042\021" +
    "\067\054\075\056\060\060\051\073\071\100\133\101\077" +
    "\102\076\103\106\104\105\105\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\013\103\020\042\021\067" +
    "\054\075\056\060\060\051\073\071\101\137\102\076\103" +
    "\106\104\105\105\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\013" +
    "\103\020\042\021\067\054\075\056\060\060\051\073\071" +
    "\077\143\100\072\101\077\102\076\103\106\104\105\105" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\013\103\020\042\021\067\054\075\056" +
    "\060\060\051\073\071\075\146\076\070\077\102\100\072" +
    "\101\077\102\076\103\106\104\105\105\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\013\103\020\042\021\067\054\075\056" +
    "\060\060\051\073\071\103\153\104\105\105\065\001\001" +
    "\000\002\001\001\000\004\044\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\170" +
    "\001\001\000\052\013\103\020\042\021\067\030\177\033" +
    "\175\041\174\054\075\056\060\060\051\072\176\073\071" +
    "\075\104\076\070\077\102\100\072\101\077\102\076\103" +
    "\106\104\105\105\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\013\103\020\042\021\067\030\177\033" +
    "\203\041\174\042\215\043\204\054\075\056\060\060\051" +
    "\072\176\073\071\075\104\076\070\077\102\100\072\101" +
    "\077\102\076\103\106\104\105\105\065\001\001\000\012" +
    "\015\200\016\201\017\157\020\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\211\001\001\000\002\001\001\000\056\013" +
    "\103\020\042\021\067\030\177\033\203\041\174\042\205" +
    "\043\204\054\075\056\060\060\051\072\176\073\071\075" +
    "\104\076\070\077\102\100\072\101\077\102\076\103\106" +
    "\104\105\105\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\013\103" +
    "\020\042\021\067\030\177\033\203\041\174\043\210\054" +
    "\075\056\060\060\051\072\176\073\071\075\104\076\070" +
    "\077\102\100\072\101\077\102\076\103\106\104\105\105" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\013" +
    "\103\020\042\021\067\054\075\056\060\060\051\073\071" +
    "\075\225\076\070\077\102\100\072\101\077\102\076\103" +
    "\106\104\105\105\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\042\021\033\055" +
    "\230\001\001\000\002\001\001\000\046\013\103\020\042" +
    "\021\067\054\075\056\060\060\051\072\233\073\071\074" +
    "\232\075\104\076\070\077\102\100\072\101\077\102\076" +
    "\103\106\104\105\105\065\001\001\000\050\013\103\020" +
    "\042\021\236\054\075\055\237\056\060\060\051\072\233" +
    "\073\071\074\235\075\104\076\070\077\102\100\072\101" +
    "\077\102\076\103\106\104\105\105\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\242\001\001\000\002\001\001\000\004\046\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\013\103\020\042\021\067\054\075\056\060\060" +
    "\051\072\250\073\071\075\104\076\070\077\102\100\072" +
    "\101\077\102\076\103\106\104\105\105\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\013\103\020\042\021\067\054\075\056" +
    "\060\060\051\072\255\073\071\075\104\076\070\077\102" +
    "\100\072\101\077\102\076\103\106\104\105\105\065\001" +
    "\001\000\002\001\001\000\004\046\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\263\015\154\016\164\017\157\020\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\013" +
    "\103\020\042\021\067\030\177\033\203\041\174\042\267" +
    "\043\204\054\075\056\060\060\051\072\176\073\071\075" +
    "\104\076\070\077\102\100\072\101\077\102\076\103\106" +
    "\104\105\105\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\013\103\020\042\021\067\054\075\056\060" +
    "\060\051\072\272\073\071\075\104\076\070\077\102\100" +
    "\072\101\077\102\076\103\106\104\105\105\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\013\103\020" +
    "\042\021\067\054\075\056\060\060\051\072\275\073\071" +
    "\075\104\076\070\077\102\100\072\101\077\102\076\103" +
    "\106\104\105\105\065\001\001\000\002\001\001\000\004" +
    "\046\277\001\001\000\004\062\300\001\001\000\002\001" +
    "\001\000\004\046\310\001\001\000\002\001\001\000\044" +
    "\013\103\020\042\021\067\054\075\056\060\060\051\072" +
    "\304\073\071\075\104\076\070\077\102\100\072\101\077" +
    "\102\076\103\106\104\105\105\065\001\001\000\002\001" +
    "\001\000\004\046\306\001\001\000\004\062\307\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\013\103\020" +
    "\042\021\067\054\075\056\060\060\051\072\312\073\071" +
    "\075\104\076\070\077\102\100\072\101\077\102\076\103" +
    "\106\104\105\105\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\064\315\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\013\103\020\042\021\067\054\075" +
    "\056\060\060\051\072\320\073\071\075\104\076\070\077" +
    "\102\100\072\101\077\102\076\103\106\104\105\105\065" +
    "\001\001\000\002\001\001\000\052\020\042\021\033\031" +
    "\052\047\322\050\036\051\027\052\021\053\032\054\044" +
    "\055\043\056\060\057\057\060\051\061\045\063\053\065" +
    "\041\066\050\067\054\070\037\071\040\001\001\000\004" +
    "\064\323\001\001\000\002\001\001\000\052\020\042\021" +
    "\033\031\052\047\325\050\036\051\027\052\021\053\032" +
    "\054\044\055\043\056\060\057\057\060\051\061\045\063" +
    "\053\065\041\066\050\067\054\070\037\071\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\354\022" +
    "\327\001\001\000\004\012\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\334\001\001\000\002\001" +
    "\001\000\020\024\336\025\343\026\342\027\341\031\344" +
    "\034\337\035\013\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\025\345" +
    "\026\342\027\341\031\344\034\337\035\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\347\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\353\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\014\361\015\154\016\164\017\157\020\160\036\362" +
    "\037\360\040\363\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\014\361" +
    "\015\154\016\164\017\157\020\160\037\365\040\363\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\014\371" +
    "\015\154\016\164\017\157\020\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\013\103\020\042\021\067\054" +
    "\075\056\060\060\051\072\376\073\071\075\104\076\070" +
    "\077\102\100\072\101\077\102\076\103\106\104\105\105" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	StringBuilder sb = new StringBuilder();
	public void addText(String text)
	{
		sb.append(text);
		sb.append("\t\n");
	}
	public void printText()
	{
		System.out.println(sb);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= conyogram EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // conyogram ::= OMG_section yaya_section sub_yaya_section super_yaya 
            {
              Object RESULT =null;
		 System.out.println("PROGRAM PARSED.\n"); printText(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conyogram",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OMG_section ::= OMG_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OMG_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_section",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OMG_list ::= OMG_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OMG_list ::= OMG_dec OMG_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OMG_dec ::= OMG IDENTIFIER MAKE_KUHA sabi_sabi DB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 addText("ADDED NEW CONSTANT " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OMG_dec",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // yaya_section ::= yaya_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // yaya_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_section",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // yaya_list ::= yaya 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // yaya_list ::= yaya yaya_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sub_yaya_section ::= sub_yaya_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sub_yaya_section ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_section",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sub_yaya_list ::= sub_yaya 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sub_yaya_list ::= sub_yaya sub_yaya_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // super_yaya ::= SUPER_YAYA utos_block 
            {
              Object RESULT =null;
		 addText("MAIN FUNCTION FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("super_yaya",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // literal ::= INT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // literal ::= CHAR_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // literal ::= BOOL_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // literal ::= WALEY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // data_type ::= primitive_dt 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // data_type ::= reference_dt 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("data_type",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primitive_dt ::= INTY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primitive_dt ::= FLOATY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primitive_dt ::= STRINGY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primitive_dt ::= CHARY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primitive_dt ::= BOOLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primitive_dt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reference_dt ::= valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // reference_dt ::= array_dt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("reference_dt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // array_dt ::= primitive_dt brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // array_dt ::= valid_name brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_dt",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valid_name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // valid_name ::= valid_name COLON IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_name",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // valid_var ::= valid_name 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valid_var ::= valid_name ref_brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valid_var",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // sub_yaya ::= MAKE_UTUSAN IDENTIFIER sy_body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 addText("CREATED NEW CLASS: " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sub_yaya",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // sy_body ::= DOLLAR_SIGN sy_opt DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_body",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // sy_opt ::= sy_cont_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sy_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_opt",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sy_cont_list ::= sy_cont sy_cont_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sy_cont_list ::= sy_cont 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sy_cont ::= arte_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sy_cont ::= yaya 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sy_cont ::= constructor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_cont",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // constructor ::= MAKE_SIMULA IDENTIFIER utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sy_init ::= BRAND_NEW reference_dt LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sy_init",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arte_dec ::= MAKE_ARTE data_type IDENTIFIER arte_assign DB 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 addText("DECLARED NEW VARIABLE: " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_dec",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arte_assign ::= MAKE_KUHA arte_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arte_assign ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_assign",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arte_init ::= array_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // arte_init ::= sy_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // arte_init ::= sabi_sabi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // yaya ::= yaya_header utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK data_type IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		 addText("CREATED NEW FUNCTION: " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // yaya_header ::= HIRE_YAYA IDENTIFIER BAYAD LEFT_PAREN yaya_param_sec RIGHT_PAREN MAKE_BALIK POOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 addText("CREATED NEW FUNCTION: " + id + "."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_header",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // yaya_param_sec ::= yaya_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // yaya_param_sec ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_sec",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // yaya_param_list ::= yaya_param COMMA yaya_param_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // yaya_param_list ::= yaya_param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param_list",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // yaya_param ::= data_type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("yaya_param",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // array_init ::= LEFT_CURLY arte_init_list RIGHT_CURLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_init",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arte_init_list ::= arte_init_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arte_init_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_list",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arte_init_opt ::= arte_init COMMA arte_init_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arte_init_opt ::= arte_init 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arte_init_opt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // brackets ::= LEFT_BRACE RIGHT_BRACE brackets 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // brackets ::= LEFT_BRACE RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("brackets",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ref_brackets ::= LEFT_BRACE ss_OR RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ref_brackets",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // utos_block ::= DOLLAR_SIGN utos_block_opt DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // utos_block_opt ::= block_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // utos_block_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_block_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // block_content ::= utos_dec block_content 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // block_content ::= utos_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_content",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // utos_dec ::= utos_dec_db DB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // utos_dec ::= utos_dec_val DB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // utos_dec ::= utos_dec_nodb 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // utos_dec_nodb ::= utos_likeKapag 
            {
              Object RESULT =null;
		 addText("IF STATEMENT FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // utos_dec_nodb ::= utos_makePalit 
            {
              Object RESULT =null;
		 addText("SWITCH STATEMENT FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // utos_dec_nodb ::= utos_likeHabang 
            {
              Object RESULT =null;
		 addText("WHILE LOOP FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // utos_dec_nodb ::= utos_makeGawaHabang 
            {
              Object RESULT =null;
		 addText("DO WHILE LOOP FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // utos_dec_nodb ::= utos_makeUlit 
            {
              Object RESULT =null;
		 addText("FOR LOOP FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // utos_dec_nodb ::= utos_makeArte 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_nodb",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // utos_dec_db ::= utos_makeKuha 
            {
              Object RESULT =null;
		 addText("ASSIGNMENT STATEMENT FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // utos_dec_db ::= utos_makeSulat 
            {
              Object RESULT =null;
		 addText("OUTPUT FUNCTION FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // utos_dec_db ::= utos_makeSabi 
            {
              Object RESULT =null;
		 addText("STANDALONE EXPRESSION FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // utos_dec_db ::= BREAKUP 
            {
              Object RESULT =null;
		 addText("BREAK FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // utos_dec_db ::= MAKEUP 
            {
              Object RESULT =null;
		 addText("CONTINUE FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_db",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // utos_dec_val ::= utos_makeTawag 
            {
              Object RESULT =null;
		 addText("FUNCTION CALL FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // utos_dec_val ::= utos_makeBasa 
            {
              Object RESULT =null;
		 addText("INPUT FUNCTION FOUND!"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_dec_val",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // utos_makeKuha ::= valid_var arte_assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeKuha",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // utos_makeTawag ::= MAKE_TAWAG valid_name LEFT_PAREN arte_init_list RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeTawag",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // utos_makeSulat ::= MAKE_SULAT LEFT_PAREN sabi_sabi RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeSulat",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // utos_makeBasa ::= MAKE_BASA LEFT_PAREN data_type RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeBasa",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // utos_likeKapag ::= LIKE_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeKapag",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // utos_thisNalang ::= THIS_NALANG utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // utos_thisNalang ::= THIS_NALANG_KAPAG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block utos_thisNalang 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // utos_thisNalang ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_thisNalang",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // utos_makePalit ::= MAKE_PALIT LEFT_PAREN sabi_sabi RIGHT_PAREN DOLLAR_SIGN makePalit_MRW DOLLAR_SIGN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makePalit",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // makePalit_MRW ::= MRW sabi_sabi COLON utos_block_opt makePalit_MRW 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // makePalit_MRW ::= MDR COLON utos_block_opt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // makePalit_MRW ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("makePalit_MRW",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // utos_likeHabang ::= LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_likeHabang",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // utos_makeGawaHabang ::= MAKE_GAWA utos_block LIKE_HABANG LEFT_PAREN sabi_sabi RIGHT_PAREN DB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeGawaHabang",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for utos_makeKuha RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // utos_makeUlit ::= MAKE_ULIT LEFT_PAREN utos_makeKuha DB sabi_sabi_for sabi_sabi_for RIGHT_PAREN utos_block 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeUlit",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // utos_makeArte ::= arte_dec 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeArte",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // utos_makeSabi ::= MAKE_SABI sabi_sabi 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("utos_makeSabi",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // sabi_sabi_end ::= valid_var 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // sabi_sabi_end ::= utos_dec_val 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // sabi_sabi_end ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_end",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // sabi_sabi_for ::= sabi_sabi DB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi_for",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // sabi_sabi ::= ss_OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sabi_sabi",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ss_OR ::= ss_AND OR OR ss_OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ss_OR ::= ss_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_OR",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ss_AND ::= ss_equality AND AND ss_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ss_AND ::= ss_equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_AND",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ss_equality ::= ss_comparison equality ss_equality 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ss_equality ::= ss_comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_equality",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ss_comparison ::= ss_a1 comparison ss_comparison 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ss_comparison ::= ss_a1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_comparison",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ss_a1 ::= ss_a2 arithmetic_1 ss_a1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ss_a1 ::= ss_a2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a1",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ss_a2 ::= ss_unary_1 arithmetic_2 ss_a2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ss_a2 ::= ss_unary_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_a2",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ss_unary_1 ::= NOT ss_unary_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ss_unary_1 ::= PLUS PLUS ss_unary_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ss_unary_1 ::= MINUS MINUS ss_unary_1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ss_unary_1 ::= ss_unary_2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_1",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ss_unary_2 ::= ss_unary_2 POS_INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ss_unary_2 ::= ss_unary_2 NEG_INC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ss_unary_2 ::= ss_paren 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_unary_2",66, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ss_paren ::= LEFT_PAREN ss_paren RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ss_paren ::= sabi_sabi_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ss_paren",67, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // equality ::= EQUAL_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // equality ::= NOT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // comparison ::= GT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // comparison ::= LT_EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // comparison ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // comparison ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comparison",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // arithmetic_1 ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // arithmetic_1 ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_1",70, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // arithmetic_2 ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // arithmetic_2 ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // arithmetic_2 ::= MODULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arithmetic_2",71, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
